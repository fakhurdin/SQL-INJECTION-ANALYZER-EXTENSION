### **Question No.01 [SQL Queries]**

#### 1. Compute the number of days worked by employees in department ID 80:
```sql
SELECT 
    employee_id,
    job_title,
    SUM(end_date - start_date) AS days_worked
FROM 
    job_history jh
JOIN 
    jobs j ON jh.job_id = j.job_id
WHERE 
    jh.department_id = 80
GROUP BY 
    employee_id, job_title;
```

---

#### 2. Query to generate specific output:
*(Provide required structure or example for accurate query generation)*

---

#### 3. Find the full name and country of an employee based on ID:
```sql
SELECT 
    e.employee_id,
    CONCAT(e.first_name, ' ', e.last_name) AS full_name,
    c.country_name
FROM 
    employees e
JOIN 
    departments d ON e.department_id = d.department_id
JOIN 
    locations l ON d.location_id = l.location_id
JOIN 
    countries c ON l.country_id = c.country_id
WHERE 
    e.employee_id = :employee_id; -- Replace with specific employee ID
```

---

#### 4. Query to generate specific output:
*(Provide required structure or example for accurate query generation)*

---

#### 5. Find employees who have worked in only one department:
```sql
SELECT 
    employee_id,
    MIN(start_date) AS start_date,
    MAX(end_date) AS end_date
FROM 
    job_history
GROUP BY 
    employee_id
HAVING 
    COUNT(DISTINCT department_id) = 1;
```

---

### **Question No.02 [TRIGGERS]**

#### 1. BEFORE INSERT Trigger:
```sql
CREATE OR REPLACE TRIGGER trg_BeforeInsertPost
BEFORE INSERT ON Posts
FOR EACH ROW
BEGIN
    INSERT INTO PostHistory (history_id, post_id, previous_content, action)
    VALUES (
        POST_HISTORY_SEQ.NEXTVAL, -- Assuming a sequence for history_id
        :NEW.post_id,
        NULL,
        'Insert'
    );
END;
/
```

---

#### 2. BEFORE UPDATE Trigger:
```sql
CREATE OR REPLACE TRIGGER trg_BeforeUpdatePost
BEFORE UPDATE ON Posts
FOR EACH ROW
BEGIN
    INSERT INTO PostHistory (history_id, post_id, previous_content, action)
    VALUES (
        POST_HISTORY_SEQ.NEXTVAL, -- Assuming a sequence for history_id
        :OLD.post_id,
        :OLD.content,
        'Update'
    );
END;
/
```

---

#### 3. BEFORE DELETE Trigger:
```sql
CREATE OR REPLACE TRIGGER trg_BeforeDeletePost
BEFORE DELETE ON Posts
FOR EACH ROW
BEGIN
    INSERT INTO PostHistory (history_id, post_id, previous_content, action)
    VALUES (
        POST_HISTORY_SEQ.NEXTVAL, -- Assuming a sequence for history_id
        :OLD.post_id,
        :OLD.content,
        'Delete'
    );
END;
/
```

---

### **Question No.03 [PL/SQL]**

#### 1. PL/SQL procedure to get salary history:
```sql
CREATE OR REPLACE PROCEDURE GetEmployeeSalaryHistory(emp_id IN NUMBER) IS
    CURSOR salary_cursor IS
        SELECT salary, effective_date
        FROM salary_history
        WHERE employee_id = emp_id;
    v_salary employees.salary%TYPE;
    v_effective_date salary_history.effective_date%TYPE;

    EmployeeNotFoundException EXCEPTION;
BEGIN
    OPEN salary_cursor;
    FETCH salary_cursor INTO v_salary, v_effective_date;
    IF salary_cursor%NOTFOUND THEN
        RAISE EmployeeNotFoundException;
    END IF;
    LOOP
        FETCH salary_cursor INTO v_salary, v_effective_date;
        EXIT WHEN salary_cursor%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Salary: ' || v_salary || ' Effective Date: ' || v_effective_date);
    END LOOP;
    CLOSE salary_cursor;
EXCEPTION
    WHEN EmployeeNotFoundException THEN
        DBMS_OUTPUT.PUT_LINE('Error: Employee not found.');
END;
/
```

---

#### 2. Function to calculate average salary in a department:
```sql
CREATE OR REPLACE FUNCTION GetAverageSalary(dept_id IN NUMBER) RETURN NUMBER IS
    v_avg_salary NUMBER;
BEGIN
    SELECT AVG(salary)
    INTO v_avg_salary
    FROM employees
    WHERE department_id = dept_id;
    RETURN v_avg_salary;
END;
/
```

---

#### 3. Procedure to update salaries by job title:
```sql
CREATE OR REPLACE PROCEDURE UpdateSalariesByJobTitle(job_title IN VARCHAR2, increment_percent IN NUMBER) IS
BEGIN
    UPDATE employees
    SET salary = salary + (salary * increment_percent / 100)
    WHERE job_title = job_title;
    COMMIT;
END;
/
```

---

### **Question No.04 [MongoDB]**

#### 1. Query for specific output:
*(Provide collection structure or example for accurate query generation)*

---

#### 2. Query for specific output:
*(Provide collection structure or example for accurate query generation)*

---

#### 3. Update stock for books with pages > 200:
```javascript
db.books.updateMany(
    { pages: { $gt: 200 } },
    { $set: { stock: "Updated" } }
);
```

---

#### 4. Insert specified records into books:
```javascript
db.books.insertMany([
    { title: "Book A", author: "Author A", pages: 250, tags: ["fiction"] },
    { title: "Book B", author: "Author B", pages: 150, tags: ["technology"] }
]);
```

---

#### 5. Find books with tags "technology" or "Artificial Intelligence":
```javascript
db.books.find(
    { tags: { $in: ["technology", "Artificial Intelligence"] } }
);
```



lab 11:
Kindly go through these functions for Mongo db:

1. CRUD Operations (Create, Read, Update, Delete)
Create (Insert Documents)

insertOne() – Inserts a single document.
insertMany() – Inserts multiple documents at once.
Example:

db.books.insertOne({ _id: 1, title: "New Book", stock: 10, issued: 3 });
db.books.insertMany([
{ _id: 2, title: "Second Book", stock: 5, issued: 1 },
{ _id: 3, title: "Third Book", stock: 8, issued: 2 }
]);

2.
Read (Query Documents)

find() – Retrieves documents matching the query criteria.
findOne() – Retrieves the first document that matches the query.
Example:

db.books.find({ stock: { $gt: 5 } });
db.books.findOne({ title: "New Book" });

3. Update (Modify Documents)

updateOne() – Updates the first document that matches the filter.
updateMany() – Updates all documents that match the filter.
$set – Modifies the value of a field.
$inc – Increments the value of a field.
Example:

db.books.updateOne({ _id: 1 }, { $set: { stock: 12 } });
db.books.updateMany({ stock: { $lt: 5 } }, { $inc: { stock: 5 } });

4. Delete (Remove Documents)

deleteOne() – Deletes the first document that matches the filter.
deleteMany() – Deletes all documents that match the filter.
Example:

db.books.deleteOne({ _id: 3 });
db.books.deleteMany({ stock: { $lt: 1 } });


5. Query Operators for Filtering
Comparison Operators

$gt, $lt, $gte, $lte – Greater than, less than, greater than or equal to, less than or equal to.
$eq, $ne – Equal to, not equal to.
$in, $nin – Matches any value in an array, or not in an array.
Example:

db.books.find({ stock: { $gt: 5, $lt: 20 } });
db.books.find({ _id: { $in: [1, 2, 3] } });

6. Logical Operators

$and, $or – Combines multiple conditions.
$not – Inverts the condition.
$nor – None of the conditions are met.
Example:

db.books.find({ $and: [{ stock: { $gt: 5 } }, { issued: { $lt: 10 } }] });
db.books.find({ $or: [{ stock: 0 }, { reorder: true }] });


7. Aggregation Operators
Aggregation Pipeline

$match – Filters documents based on criteria.
$group – Groups documents by a specified field.
$sort – Sorts documents in ascending or descending order.
$project – Reshapes documents by including/excluding fields.
Example:

db.books.aggregate([
{ $match: { stock: { $gt: 5 } } },
{ $group: { _id: null, totalStock: { $sum: "$stock" } } }
]);

8. Sorting and Projection

sort() – Sorts documents in ascending (1) or descending (-1) order.
project() – Selects specific fields to include or exclude.
Example:

db.books.find().sort({ stock: -1 });
db.books.find({}, { title: 1, stock: 1, _id: 0 });

9. Array Operators
Array Queries

$elemMatch – Matches documents where an array field matches specified criteria.
$size – Matches documents with arrays of a specified size.
Example:

db.books.find({ ratings: { $elemMatch: { rating: { $gte: 4 } } } });
db.books.find({ tags: { $size: 2 } });


10. Array Modification

$push – Adds elements to an array.
$pull – Removes elements from an array.
$addToSet – Adds unique elements to an array.
Example:

db.books.updateOne({ _id: 1 }, { $push: { tags: "new tag" } });
db.books.updateOne({ _id: 2 }, { $pull: { tags: "AI" } });

11. Indexing and Text Search
createIndex() – Creates an index on a field for faster queries.
$text – Performs text search.
$search – Searches indexed fields.
Example:

db.books.createIndex({ title: "text" });
db.books.find({ $text: { $search: "MongoDB" } });

12. Common Combinations:
Filter + Projection + Sort:
db.books.find({ stock: { $gt: 5 } }, { title: 1, stock: 1 }).sort({ stock: -1 });
Update with Condition:
db.books.updateMany({ pages: { $gt: 400 } }, { $set: { reorder: true } });
Aggregation for Total Calculation:
db.books.aggregate([
{ $match: { stock: { $gte: 0 } } },
{ $group: { _id: null, totalStock: { $sum: "$stock" } } }
]);